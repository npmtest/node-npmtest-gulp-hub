{"/home/travis/build/npmtest/node-npmtest-gulp-hub/test.js":"/* istanbul instrument in package npmtest_gulp_hub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/lib.npmtest_gulp_hub.js":"/* istanbul instrument in package npmtest_gulp_hub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_hub = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_hub = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-hub && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_hub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_hub\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_hub.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_hub.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_hub.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_hub.__dirname + '/lib.npmtest_gulp_hub.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/node_modules/gulp-hub/lib/index.js":"/*\n * gulp-hub\n * https://github.com/frankwallis/gulp-hub\n *\n * Copyright (c) 2014 Frank Wallis\n * Licensed under the MIT license.\n */\nvar path = require('path');\nvar util = require('gulp-util');\nvar resolveGlob = require('./resolve-glob');\nvar getSubfiles = require('./get-subfiles');\nvar loadSubfile = require('./load-subfile');\nvar addTask = require('./add-task');\n\n// Creates a vanilla object with a `null` prototype (so we don't have to use\n// `hasOwnProperty`) to maintain the state of the tasks registry\nvar tasks = Object.create(null);\n\n/**\n * Load tasks from gulpfiles specified by the file `pattern`.\n * @param {string|array} pattern - A gulp-style file pattern to glob gulpfiles\n */\nfunction loadFiles(pattern, rootDir) {    \n    // assert `pattern` is a valid glob (non-empty string) or array of globs\n    var isString = typeof pattern === 'string';\n    var isArray = Array.isArray(pattern);\n    if ((!isString && !isArray) || (pattern.length === 0)) {\n        throw new TypeError('A glob pattern or an array of glob patterns is required.');\n    }\n\n    // find all the gulpfiles - needs to happen synchronously so we create the tasks before gulp runs\n    var filelist = resolveGlob(pattern, rootDir)\n        .map(function(filename) {\n            return path.relative(process.cwd(), path.join(rootDir, filename));\n        });\n\n    var subfiles = getSubfiles(filelist);\n\n    // load all the gulpfiles\n    subfiles.forEach(function (subfile) {\n        util.log( 'Loading', util.colors.yellow(subfile.relativePath));\n        loadSubfile(subfile, tasks);\n    });\n}\n\n/**\n * Returns the path of the file containing the function which called the function \n * which called this function.\n */\nfunction getCallSite() {\n    var _callsite = require('callsite');\n    var stack = _callsite();\n    return stack[2].getFileName();\n}\n\n// support recursive calls (see examples)\nvar inhub = false;\n\nfunction hub(pattern) {\n    var callsite = getCallSite();\n    var recursive = inhub;\n    inhub = true;\n\n    loadFiles(pattern, path.dirname(callsite));\n\n    // only create the task tree once\n    if (!recursive) {\n        for (var name in tasks)\n            addTask(tasks[name]);\n\n        inhub = false;\n    }\n}\n\nmodule.exports = hub;","/home/travis/build/npmtest/node-npmtest-gulp-hub/node_modules/gulp-hub/lib/resolve-glob.js":"var path = require('path');\nvar glob = require( 'glob' );\n\n/**\n * Resolves a gulp-like glob pattern,\n * https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpsrcglobs-options,\n * to a minimatch glob string, https://github.com/isaacs/minimatch\n * \n * @param {string|array} pattern - A glob or an array of globs\n * @returns - An array of files matched by the glob\n */\nmodule.exports = function(pattern, rootDir) {\n    if (Array.isArray(pattern)) {\n        if (pattern.length === 1)\n            pattern = pattern[0];\n        else\n            pattern = '{' + pattern.join(',') + '}';\n    }\n\n    return glob.sync(pattern, { \"nosort\": true, \"cwd\": rootDir })\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/node_modules/gulp-hub/lib/get-subfiles.js":"var path = require( 'path' );\n\n/**\n * Given a list of file paths, return a list of objects representing each file's\n * relative path, absolute path, and unique name. (The unique name is just the\n * relative path for now.)\n * \n * @param {array} filelist - A list of file paths\n * @returns - An array of objects containing each file's absolute path, relative path, and a unique name\n * @example\n *     > var getSubfiles = require('./get-subfiles');\n *     > getSubfiles(['b/c.js', '2/3.js']);\n *     [\n *         {\n *             relativePath: b/c.js,\n *             absolutePath: /a/b/c.js,\n *             uniqueName:   b/c.js\n *         },\n *         {\n *             relativePath: 2/3.js,\n *             absolutePath: /1/2/3.js,\n *             uniqueName:   2/3.js\n *         }\n *     ]\n */\nmodule.exports = function(filelist) {\n\n    if(!Array.isArray(filelist)) {\n        throw new TypeError( 'An array of file paths is required.' );\n    }\n\n    var subfiles = [];\n\n    filelist.forEach(function (file) {\n        var subfile = {};\n\n        subfile.relativePath = file;\n        subfile.absolutePath = path.resolve(file);\n\n        // a subfile's unique name is just its relative path\n        subfile.uniqueName = subfile.relativePath;\n\n        subfiles.push(subfile);\n    });\n\n    return subfiles;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/node_modules/gulp-hub/lib/load-subfile.js":"var gulp = require('gulp');\nvar hutil = require('./hub-util');\nvar addSubtask = require('./add-subtask');\nvar path = require('path');\nvar proxyquire = require('proxyquire');\n\n/**\n * Load the tasks from the specified gulpfile and register them with the task\n * registry.\n *\n * @param  {object} subfile - A gulp-hub file object\n * @param  {object} tasks   - The task registry. Will be modified.\n */\nmodule.exports = function(subfile, tasks) {\n\n    // param validation\n    if(!hutil.isValidHubFile(subfile)) {\n        throw new TypeError('`subfile` must be a valid Gulp Hub file object.');\n    }\n    if(!(typeof tasks === 'object' && tasks !== null && !Array.isArray(tasks))) {\n        throw new TypeError('`task` must be an object');\n    }\n\n    // keep reference to gulp.task function\n    var originalTaskFn = gulp.Gulp.prototype.task;\n    var usingLocal = true;\n\n    // redirect gulp.task to call our function instead in case they are using our instance of gulp\n    gulp.Gulp.prototype.task = function (name, parm1, parm2) {\n        addSubtask(subfile, tasks, name, parm1, parm2);\n        usingLocal = false;\n    };\n\n\tproxyquire(subfile.absolutePath,{\n\t\tgulp:gulp\n\t});\n\n    // if that gulpfile used its own local gulp installation\n    // then we need to transfer the tasks out of that into ours\n    if (usingLocal) {\n        var submodule = findModule(function(mod) {\n            return (mod.id === subfile.absolutePath);\n        });\n\n        if (submodule)\n            addLocalGulpTasks(subfile, submodule, tasks);\n    }\n\n    // restore gulp.task function\n    gulp.Gulp.prototype.task = originalTaskFn;\n};\n\nfunction findModule(pred, parent) {\n    parent = parent || module;\n\n    for (i = 0; i < parent.children.length; i ++) {\n        if (pred(parent.children[i]))\n            return parent.children[i];\n    }\n\n    return parent.parent ? findModule(pred, parent.parent) : undefined;\n}\n\n// I see trouble ahead...\nfunction addLocalGulpTasks(subfile, submodule, tasks) {\n\n    var gulpMod = findModule(function(mod) {\n        return (path.basename(path.dirname(mod.id)) === 'gulp');\n    }, submodule);\n\n    var localInst = gulpMod.exports;\n\n    // copy all the tasks over\n    for (var name in localInst.tasks) {\n        if (localInst.tasks.hasOwnProperty(name)) {\n            var task = localInst.tasks[name];\n\n            if (!task.__hubadded) {\n                task.__hubadded = true;\n                addSubtask(subfile, tasks, task.name, task.dep, task.fn);\n            }\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/node_modules/gulp-hub/lib/hub-util.js":"/**\n * Gulp Hub utility module\n */\nvar _ = require( 'lodash' );\n\n/**\n * Returns true if `file` is a valid gulp-hub file object.\n *\n * @param file - The variable to test\n * @return - True if the variable is a gulp-hub object, false if not\n */\nmodule.exports.isValidHubFile = function (file) {\n    if (\n        _.isPlainObject( file ) &&\n        file.relativePath && typeof file.relativePath === 'string' &&\n        file.absolutePath && typeof file.absolutePath === 'string' &&\n        file.uniqueName   && typeof file.uniqueName   === 'string'\n    ){\n        return true;\n    }\n    return false;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/node_modules/gulp-hub/lib/add-subtask.js":"var path  = require('path');\nvar _     = require( 'lodash' );\nvar hutil = require('./hub-util');\n\nvar makeSubtaskFunction = function(subfile, subfn) {\n    if (subfn.length > 0) {\n        // subfn is asynchronous (has callback parameter)\n        return function(cb) {\n            // give the task function the correct working directory\n            process.chdir(path.dirname(subfile.absolutePath));\n            return subfn(cb);\n        };\n    }\n    // subfn is synchronous (no callback parameter)\n    return function() {\n        // give the task function the correct working directory\n        process.chdir(path.dirname(subfile.absolutePath));\n        return subfn();\n    };\n};\n\n/**\n * Adds a subfile's tasks, task dependencies, and callback to the task registry\n * under the master task name, e.g., given a task name `task-name`, and a\n * subfile like the following,\n *\n *     {\n *         absolutePath: /a/b/c.js,\n *         relativepath: b/c.js,\n *         uniqueName:   b/c.js\n *     }\n *\n * the task registry would gain an entry like the following,\n *\n *     {\n *         'task-name': {\n *             name:     'task-name',                // master task name\n *             subtasks: [\n *                 {\n *                     'name':   'b/c.js-task-name', // prefixed subtask name\n *                     'param1': [                   // prefixed subtask deps (optional)\n *                         'b/c.js-task-name-dep-1',\n *                         'b/c.js-task-name-dep-2',\n *                     ],\n *                     'param2': function () { ... } // subtask callback\n *                 },\n *                 ...                               // other subtask records from other subfiles\n *             ]\n *         },\n *         ...                                       // other master tasks\n *     }\n *\n * Note that subtask dependencies are optional, i.e., `param1` would contain\n * the subtask callback, and `param2` would be `undefined`.\n *\n * @param  {object}         subfile - A subfile in `get-subfiles` form\n * @param  {object}         tasks   - The task registry. Will be modified!\n * @param  {string}         name    - The task name\n * @param  {array|function} param1  - Gulp task param 1, a task dependency list, or a function\n * @param  {[function]}     param2  - Gulp task param 2, a function (optional)\n *\n * @returns - The output of the task function\n */\nmodule.exports = function(subfile, tasks, name, param1, param2) {\n\n    // param validation\n    if (!hutil.isValidHubFile(subfile)) {\n        throw new TypeError('`subfile` must be a valid Gulp Hub file object.');\n    }\n    if (!_.isPlainObject(tasks)) {\n        throw new TypeError('`tasks` must be a plain object.');\n    }\n    if (!_.isString(name)) {\n        throw new TypeError('`name` must be a string.');\n    }\n    if (!_.isArray(param1) && !_.isFunction(param1)) {\n        throw new TypeError('`param1` must be an array or function.');\n    }\n    if (!_.isFunction(param2) && !_.isUndefined(param2)) {\n        throw new TypeError('`param2` must be a function or undefined.');\n    }\n\n    // register a master task with this name\n    if (!tasks[name]) {\n        tasks[name] = {};\n        tasks[name].name = name;\n        tasks[name].subtasks = [];\n    }\n\n    // give the subtask a unique name\n    var subname = subfile.uniqueName + '-' + name;\n\n    // sort out the task parameters\n    var subparam1, subparam2;\n\n    if (Array.isArray(param1)) {\n        // translate the dependencies to their unique names\n        subparam1 = param1.map(function (dep) { return subfile.uniqueName + '-' + dep; });\n\n        if (param2) {\n            subparam2 = makeSubtaskFunction(subfile, param2);\n        }\n        else {\n            subparam2 = undefined;\n        }\n    }\n    else {\n        subparam1 = makeSubtaskFunction(subfile, param1);\n        subparam2 = undefined;\n    }\n\n    // add it to the master task\n    tasks[name].subtasks.push({ \"name\": subname, \"param1\": subparam1, \"param2\": subparam2 });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/node_modules/gulp-hub/lib/add-task.js":"var gulp = require('gulp');\nvar runSequence = require('run-sequence');\n\n/**\n * Register the subtasks of the given tasks, and configure the master task to\n * run them.\n *\n * @param  {object} task - A task object from the task registry\n */\nmodule.exports = function(task) {\n    // create the unique subtasks\n    task.subtasks.forEach(function (subtask) {\n        gulp.task(subtask.name, subtask.param1, subtask.param2);\n    });\n\n    var args = task.subtasks.map(function (subtask) { return subtask.name; });\n\n    // create the master task which will run all the subtasks in sequence\n    gulp.task(task.name, function(cb) {\n    \tvar cwd = process.cwd();\n        var _args = args.slice();\n        _args.push(function() {\n        \t// restore current working directory (see #23)\n        \tprocess.chdir(cwd);\n        \tcb.apply(null, arguments);\n        });\n        runSequence.apply(null, _args);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-hub/node_modules/gulp-hub/gulpfile.js":"var gulp = require('gulp');\nvar istanbul = require('gulp-istanbul');\nvar mocha = require('gulp-mocha');\n\ngulp.task('bump', ['compile'], function(){\n    return gulp.src('./package.json')\n        .pipe(bump({type:'minor'}))\n        .pipe(gulp.dest('./'));\n});\n\ngulp.task('test', function (cb) {\n  gulp.src('lib/**/*.js')\n    .pipe(istanbul()) // Covering files\n    .on('finish', function () {\n      gulp.src(['test/*.js'])\n        .pipe(mocha())\n        .pipe(istanbul.writeReports()) // Creating the reports after tests runned\n        .on('end', cb);\n    });\n});\n"}